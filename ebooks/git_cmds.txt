# Change the git repo
	git remote add new <new repo link>
	git remote remove origin
	git remote rename new origin
	git fetch origin

# git stash
	git stash
	git stash list
	git stash appy
	git stash pop
	git stash show -p

# git describe, it describes the latest sha
	git describe

# git revert, to revert a old patch
	git revert -n <commit id>

# git rebase -i <commit_id>, to make a change in below commits
	git rebase -i <commit_id>    // commit id corresponds to old commit above which changes are to be done
	    choose "e" for commit to be modified 
        git rebase --continue
	git rebase --abort

# git difftool
	git difftool <commit_id> .
	git difftool <commit_id> <old_commit_id>

# Change commit author before sending
	git ci  --amend --author="harman4linux@gmail.com"

# Run a command on every commit - on rebase
	git rebase -i --exec "make distclean; rm -rf build;mkdir build;./bootstrap;cd build; PKG_CONFIG_PATH=/home/build/dpdk/96xx/CUnit-2.1-3/out/lib/pkgconfig  ../configure     --with-platform=octeontx3     --host=aarch64-marvell-linux-gnu     --disable-abi-compat     --enable-test-vald     --enable-test-example     --enable-test-perf     --disable-shared    --prefix=$(pwd)/out     --without-openssl --enable-cunit --srcdir ../;make -j16;" 6019f5b

# Soft reset to a commit id
	git reset --soft 0636eac

# Set a local branch to remote branch - to get the updates on that remote branch like your branch ahead of ... commits or you branch behind ... commits
	git branch --set-upstream-to=origin/odp-1.23.4.0-devel

# Rebase our branch on top of other master branch:
  git checkout <our branch which needs to be rebased to master>
  git rebase <master>

This will first apply all patches from master to my branch and then will apply my local patches (i.e. patches existing only on my branch and not on master)

# git absorb
  cargo install git-absorb


# git bisect


	
